
@{
    ViewData["Title"] = "Recepcion";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<style>
    .user-icon-container {
        display: flex;
        align-items: center;
        margin-left: 30px;
    }

        .user-icon-container .icon-tabler {
            margin-right: 10px;
            width: 50px;
            height: 50px;
        }

        .user-icon-container .page-title {
            margin-left: -4px;
            color: #a79a66;
        }

        .user-icon-container .page-title-home {
            margin-left: -4px;
            color: #a79a66;
        }

    .page-title-home {
        margin-top: 18px;
    }

</style>

@section PagePreTitle {

    <div class="col">
        <!-- Page pre-title -->
        <div class="user-icon-container">
            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-test-pipe" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#a79a66" fill="none" stroke-linecap="round" stroke-linejoin="round">
                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                <path d="M20 8.04l-12.122 12.124a2.857 2.857 0 1 1 -4.041 -4.04l12.122 -12.124" />
                <path d="M7 13h8" />
                <path d="M19 15l1.5 1.6a2 2 0 1 1 -3 0l1.5 -1.6z" />
                <path d="M15 3l6 6" />
            </svg>
            <h2 class="page-title-home">
                Recepción
            </h2>
        </div>
    </div>

}

@section pageactions {
    <div id="popupcontainer" style="width: 300px;">
        <div id="formcontainer" style="width: 300px; margin: 20px auto;">
            <form id="dateform">
                <div>
                    <label for="startdate">fecha de inicio:</label>
                    <div id="startdatebox"></div>
                </div>
                <div>
                    <label for="enddate">fecha de fin:</label>
                    <div id="enddatebox"></div>
                </div>
            </form>          
        </div>
            <div style="height: 100px;"></div>
        <div style="text-align: center; margin-top: 10px;">
            <button id="selectbutton"></button>
        </div>
    </div>
}

@(Html.DevExtreme().Button()
    .Text("Asignado")
    .OnClick("cambiarStatus")
)
@* .LoadAction("GetByFilter") *@

@(Html.DevExtreme().DataGrid<LBW.Models.Entity.Resultado>()
    .DataSource(ds => ds.Mvc()
        .Controller("Resultadoes")
        .LoadAction("Get")
        .Key("IdResult")
    )
    .RemoteOperations(true)
    .Columns(columns => {

        columns.AddFor(m => m.IdResult);

        columns.AddFor(m => m.IdSample).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("Resultadoes").LoadAction("MuestrasLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        );

        columns.AddFor(m => m.IdUnidad).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("Resultadoes").LoadAction("UnidadesLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        );

        columns.AddFor(m => m.IdComponent);

        columns.AddFor(m => m.IdAnalysis).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("Resultadoes").LoadAction("AnalisissLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        );

        columns.AddFor(m => m.Status).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("Resultadoes").LoadAction("ListasLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        );

        columns.AddFor(m => m.ChangedOn);

        columns.AddFor(m => m.Instrument).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("Resultadoes").LoadAction("InstrumentosLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        );

    })
    .ShowBorders(true)
            .AllowColumnReordering(true)
            .RowAlternationEnabled(false)
            .ShowColumnLines(true)
            .Grouping(g => g.AutoExpandAll(true))
            .ShowRowLines(true)
            .Paging(paging => paging.PageSize(20))
            .FilterRow(f => f.Visible(true))
            .Pager(pager =>
            {
                pager.ShowPageSizeSelector(true);
                pager.AllowedPageSizes(new[] { 20, 50, 100 });
                pager.ShowInfo(true);
            })
            .SearchPanel(s => s
                .Visible(true)
                .HighlightCaseSensitive(true)
            )
)

@* @(Html.DevExtreme().TreeList<LBW.Models.Entity.Resultado>()
    .DataSource(ds => ds.Mvc()
        .Controller("Resultadoes")
        .LoadAction("Get")
        .Key("IdResult")
    )
 
    .ParentIdExpr("IdResult")
    .ShowRowLines(true)
    .ShowBorders(true)
    .Selection(s => s
        .Mode(SelectionMode.Multiple)
        .Recursive(false)
    )
    .Columns(columns =>
    {
        columns.AddFor(m => m.NameComponent);
 
    })
    .ColumnAutoWidth(true)
    .ExpandedRowKeys(new[] { 1, 2, 10 })
) *@


<script>
    var clienteId = 3;
    var startDate = 0;
    var endDate = 0;
    var estado = 254;


    $(function () {
        var popupInstance = $("#popupContainer").dxPopup({
            title: "Recibir muestra",
            maxWidth: 500,
            visible: true,
            onHidden: function (e) {
                console.log("Pop-up cerrado");
            }
        }).dxPopup("instance");

        $("#selectButton").dxButton({
            stylingMode: "contained",
            text: "Enviar",
            type: "default",
            width: 120,
            onClick: function (e) {


                // var estadoLookup = $("#estadoLookup").dxLookup("instance");


                // Obtener las fechas seleccionadas en formato dd/MM/yyyy
                var startDateBox = $("#startDateBox").dxDateBox("instance");
                var endDateBox = $("#endDateBox").dxDateBox("instance");

                startDate = formatDate(startDateBox.option("value"), 'MM-dd-yyyy');
                endDate = formatDate(endDateBox.option("value"), 'MM-dd-yyyy');

                console.log(estado);


                // Realizar la solicitud AJAX al controlador
                $.ajax({
                    url: '@Url.Action("GetByFilter", "Muestras")',
                    method: "GET",
                    async: false,
                    data: {
                        StartDate: startDate,
                        EndDate: endDate,
                        Cliente: 3,
                        Estado: estado
                    },
                    success: function (result) {
                        console.log(result);
                        // Manejar la respuesta del controlador, por ejemplo, actualizar el DataGrid
                        var dataGrid = $("#gridContainer").dxDataGrid("instance");
                        dataGrid.option("dataSource", result);
                    },
                    error: function (error) {
                        console.error("Error al obtener los datos filtrados:", error);
                    }
                });

                popupInstance.hide();
            },
            elementAttr: {
                style: "text-align: center; line-height: normal;"
            }
        });

        // Inicializar dateBoxes
        $("#startDateBox").dxDateBox({
            type: "date",
            value: new Date(),
            onValueChanged: function (e) {
                startDate = e.value;
            }
        });

        $("#endDateBox").dxDateBox({
            type: "date",
            value: new Date(),
            onValueChanged: function (e) {
                endDate = e.value;
            }
        });

    });

    function formatDate(date, format) {
        if (!date) return ''; // Manejar casos donde la fecha es nula

        var day = date.getDate();
        var month = date.getMonth() + 1;
        var year = date.getFullYear();

        // Formatear la fecha según el formato especificado
        if (format === 'MM-dd-yyyy') {
            return `${month}-${day}-${year}`;
        }

        // Si no se especifica un formato, retornar en el formato por defecto dd/MM/yyyy
        return `${day}/${month}/${year}`;
    }

    function cambiarStatus() {
        var grid = $("#gridContainer").dxDataGrid("instance");
        var filas = grid.getSelectedRowKeys();

        if (filas.length > 0) {
            DevExpress.ui.notify("Cambiando el status a 21 para " + filas.length + " filas.", "info", 3000);

            filas.forEach(function (fila) {
                grid.updateRow(fila, { Status: 21 });
            });
        } else {
            DevExpress.ui.notify("Seleccione al menos una fila.", "warning", 3000);
        }
    }

    // $(function () {
    //     var lastSelectedEstadoId = null; // Variable para almacenar el último IdEstado seleccionado

    //     var estadoLookup = $("#estadoLookup").dxLookup("instance");

    //     // Agregar un controlador de eventos al cambio de valor en estadoLookup
    //     estadoLookup.on("valueChanged", function (e) {
    //         lastSelectedEstadoId = e.value;
    //         console.log("Último IdEstado seleccionado:", lastSelectedEstadoId);
    //     });

    //     // Agregar un controlador de eventos al cierre del ComboBox
    //     estadoLookup.on("closed", function (e) {
    //         console.log("Saliendo del ComboBox...");
    //         console.log("Último IdEstado seleccionado:", lastSelectedEstadoId);

    //         estado = lastSelectedEstadoId;
    //         actualizarVisibilidadPorEstado()

    //         // Realizar la solicitud AJAX al controlador
    //         console.log(startDate);
    //         console.log(endDate);
    //         console.log(productId);
    //         console.log(estado);




    //         $.ajax({
    //             url: '@Url.Action("GetByDate", "SubProductoes")',
    //             method: "GET",
    //             async: false,
    //             data: {
    //                 startDate: startDate,
    //                 endDate: endDate,
    //                 productoId: productId,
    //                 estado: estado
    //             },
    //             success: function (result) {
    //                 console.log(result);
    //                 // Manejar la respuesta del controlador, por ejemplo, actualizar el DataGrid
    //                 var dataGrid = $("#gridContainer").dxDataGrid("instance");
    //                 dataGrid.option("dataSource", result);
    //             },
    //             error: function (error) {
    //                 console.error("Error al obtener los datos filtrados:", error);
    //             }
    //         });



    //     });



    // });
</script>
