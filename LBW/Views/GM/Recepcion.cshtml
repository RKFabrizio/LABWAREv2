@{
    ViewData["Title"] = "Recepcion";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<style>
    .user-icon-container {
        display: flex;
        align-items: center;
        margin-left: 30px;
    }

        .user-icon-container .icon-tabler {
            margin-right: 10px;
            width: 50px;
            height: 50px;
        }

        .user-icon-container .page-title {
            margin-left: -4px;
            color: #a79a66;
        }

        .user-icon-container .page-title-home {
            margin-left: -4px;
            color: #a79a66;
        }

    .page-title-home {
        margin-top: 18px;
    }

</style>

@section PagePreTitle {

    <div class="col">
        <!-- Page pre-title -->
        <div class="user-icon-container">
            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-test-pipe" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#a79a66" fill="none" stroke-linecap="round" stroke-linejoin="round">
                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                <path d="M20 8.04l-12.122 12.124a2.857 2.857 0 1 1 -4.041 -4.04l12.122 -12.124" />
                <path d="M7 13h8" />
                <path d="M19 15l1.5 1.6a2 2 0 1 1 -3 0l1.5 -1.6z" />
                <path d="M15 3l6 6" />
            </svg>
            <h2 class="page-title-home">
                Recepción
            </h2>
        </div>
    </div>

}



@* @section PageActions {

    <div id="popupcontainer" style="width: 300px;">

            <form id="dateform">
                <div>
                    <label for="startdate">fecha de inicio:</label>
                    <div id="startdatebox"></div>
                </div>
                <div>
                    <label for="enddate">fecha de fin:</label>
                    <div id="enddatebox"></div>
                </div>
            </form>

        <div style="height: 100px;"></div>
        <div style="text-align: center; margin-top: 10px;">
            <button id="selectbutton"></button>
        </div>
    </div>

} *@

 
<div class="row row-cards">
    <div class="col-md-12">
        <div class="form-group mb-3">

            <div class="col-md-12">

                @(Html.DevExtreme().TabPanel()

                    .Items(items =>
                    {
                        items.Add()
                        .Title("Muestras No Recibidas")
                        .Template(new TemplateName("TAB1"));
                        items.Add()
                        .Title("Status de Muestras")
                        .Template(new TemplateName("TAB2"));

                    })
                    .SelectedIndex(0)
                    .Loop(false)
                    .AnimationEnabled(true)
                    .SwipeEnabled(true)
                    )
            </div>

        </div>
    </div>
</div>

@using (Html.DevExtreme().NamedTemplate("TAB1"))
{
    <div style="margin:20px;">
        @(Html.DevExtreme().Button()
            .Text("Recibido")
            .OnClick("updateStatusA")
            )

        @(Html.DevExtreme().Button()
            .Text("Cancelado")
            .OnClick("updateStatusC")
            )

        <div style="height:30px;">
        </div>


        @(Html.DevExtreme().DataGrid<LBW.Models.Entity.Muestra>()
                .ID("gridContainer")
                .DataSource(ds => ds.Mvc()
                .Controller("Muestras")
                .LoadAction("Get2")
                .Key("IdSample")
                )
                .ShowBorders(true)
                .RemoteOperations(true)
                .Selection(s => s.Mode(SelectionMode.Multiple))
                .OnSelectionChanged("onSelectionChanged")
                .Columns(columns =>
                {
                    columns.AddFor(m => m.IdSample).Caption("").Width(40)
                .CellTemplate(@<text>
        <svg id="Capa_1" data-name="Capa 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 170.85 222.32" width="20" height="20">
            <defs>
                <style>
                    .cls-1, .cls-2 {
                        fill: #fff;
                        stroke: #a1acb9;
                        stroke-width: 5px;
                    }

                    .cls-2 {
                        fill-opacity: 0;
                    }</style>
            </defs>
            <g id="iKFDj0kg9Z7rAJNhnUljb"><path class="cls-1" d="M55.42,64.62s-47.28,104.7-50,110.2-5,18.8,0,30,20,15,20,15h120s15-3.8,20-15,2.72-24.5,0-30c-2.52-5.5-49.81-110.2-49.81-110.2" transform="translate(0.06 0)" /></g>
            <g id="XN8UZQ70T0RvsJ5VMa4Kb"><path class="cls-2" d="M55.47,66.24V29.54" transform="translate(0.06 0)" /></g>
            <g id="NRt2ceM2nUSDG_63RTn7p" data-name="NRt2ceM2nUSDG 63RTn7p"><path class="cls-2" d="M59.47,12.5h-14c-1.2,0-2-1-2-4" transform="translate(0.06 0)" /></g>
            <g id="s8SYpRxWPAIU3cJdedely"><path class="cls-2" d="M127.47,6.5c0-1.3-.1-4-2-4h-80c-1.2,0-2,1-2,4" transform="translate(0.06 0)" /></g>
            <g id="jr_bdNPwxVP1tR-x2jqCO" data-name="jr bdNPwxVP1tR-x2jqCO"><path class="cls-2" d="M111.47,12.5h14c1.2,0,2-1,2-4" transform="translate(0.06 0)" /></g>
            <g id="R4Pa0_qX7JfWipx57qbDI" data-name="R4Pa0 qX7JfWipx57qbDI"><path class="cls-2" d="M43.47,6v3.2" transform="translate(0.06 0)" /></g>
            <g id="dlFIQRIEBrFAhFefXz443"><path class="cls-2" d="M127.47,5.75v3.4" transform="translate(0.06 0)" /></g>
            <g id="P_XejN-1qaYsxss16zLwI" data-name="P XejN-1qaYsxss16zLwI"><path class="cls-2" d="M115.47,66.13V30.43" transform="translate(0.06 0)" /></g>
            <g id="lTDpCcKC40D5A8sL1xawP"><path class="cls-2" d="M57.47,12.5h56" transform="translate(0.06 0)" /></g>
            <g id="T608tfJHVr4WVAKU9iJc1"><path class="cls-2" d="M59,28.93H45c-1.2,0-2-1-2-4" transform="translate(0.06 0)" /></g>
            <g id="i2taEIgYasyF9QUqWHkoE"><path class="cls-2" d="M127,22.93c0-1.3-.1-4-2-4H45c-1.2,0-2,1-2,4" transform="translate(0.06 0)" /></g>
            <g id="NmFf8K6tpBGHJF2c_Ciq_" data-name="NmFf8K6tpBGHJF2c Ciq "><path class="cls-2" d="M111,28.93h14c1.2,0,2-1,2-4" transform="translate(0.06 0)" /></g>
            <g id="uddyYndm51nNd3PysMtf1"><path class="cls-2" d="M43,22.38v3.2" transform="translate(0.06 0)" /></g>
            <g id="neZDGihypJmerEl_uYifO" data-name="neZDGihypJmerEl uYifO"><path class="cls-2" d="M48,12.36v5.3" transform="translate(0.06 0)" /></g>
            <g id="s_8OH4jhcNKJd47vSWA8A" data-name="s 8OH4jhcNKJd47vSWA8A"><path class="cls-2" d="M121.47,13.53v5.3" transform="translate(0.06 0)" /></g>
            <g id="DCAivGtc0hmVc-qZseLuG"><path class="cls-2" d="M127,22.19v3.4" transform="translate(0.06 0)" /></g>
            <g id="QSyN0JoNGEdJp41vkXrTn"><path class="cls-2" d="M57,28.93h56" transform="translate(0.06 0)" /></g>
        </svg>
    </text>);

                    columns.AddFor(m => m.TextID).Caption("Muestra");
                    @*         columns.AddFor(m => m.LoginDate).Caption("Fecha")
    .Format("yyyy-MM-dd");
    ; *@
                })
            .ShowBorders(true)
            .AllowColumnReordering(true)
            .RowAlternationEnabled(false)
            .ShowColumnLines(true)
            .Grouping(g => g.AutoExpandAll(true))
            .ShowRowLines(true)
            .Paging(paging => paging.PageSize(20))
            .FilterRow(f => f.Visible(true))
            .Pager(pager =>
            {
                pager.ShowPageSizeSelector(true);
                pager.AllowedPageSizes(new[] { 20, 50, 100 });
                pager.ShowInfo(true);
            })
            .SearchPanel(s => s
            .Visible(true)
            .HighlightCaseSensitive(true)
            )
            )
    </div> 
}

@using (Html.DevExtreme().NamedTemplate("TAB2"))
{
    <div style="margin:20px;">
        @(Html.DevExtreme().Form<LBW.Models.Entity.Muestra>()
            .Items(items => {

            items.AddSimpleFor(m => m.Status)
            .Editor(e => e
                .Lookup()
                .DataSource(ds => ds.WebApi().Controller("Muestras").LoadAction("ListasLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
                .OnValueChanged("onStatusValueChanged")
            );
            })
        )
        <div class="height: 10px;"> 

        </div>
        @(Html.DevExtreme().DataGrid<LBW.Models.Entity.Muestra>()
            .ID("gridContainer2")
            .DataSource(ds => ds.Mvc()
            .Controller("Muestras")
            .LoadAction("GetDate")
            .Key("IdSample")
        )
        .ShowBorders(true)
        .RemoteOperations(true)
        .RemoteOperations(true)
        .Columns(columns => {


        columns.AddFor(m => m.TextID).Caption("Muestra");
        }
        )
            .ShowBorders(true)
            .AllowColumnReordering(true)
            .RowAlternationEnabled(false)
            .ShowColumnLines(true)
            .Grouping(g => g.AutoExpandAll(true))
            .ShowRowLines(true)
            .Paging(paging => paging.PageSize(20))
            .FilterRow(f => f.Visible(true))
            .Pager(pager =>
            {
                pager.ShowPageSizeSelector(true);
                pager.AllowedPageSizes(new[] { 20, 50, 100 });
                pager.ShowInfo(true);
            })
            .SearchPanel(s => s
            .Visible(true)
            .HighlightCaseSensitive(true)
            )
)
        
        
    </div>
}



<script>

    var selectedIds = [];
    var selected2Ids = [];

    function onSelectionChanged(e) {
        selectedIds = e.selectedRowKeys;
        selected2Ids = e.selectedRowKeys;
    }

    function updateStatusA() {
 

        if (selectedIds.length === 0) {
            alert("No hay elementos seleccionados.");
            return;
        } 
        console.log("Selected IDs:", selectedIds);

        $.ajax({
            url: '@Url.Action("PutStatus1", "Muestras")',
            method: "PUT",
            data: {
                muestras: selectedIds
            },
            success: function (result) {
                // Procesar la respuesta si es necesario
                DevExpress.ui.notify('Datos enviados correctamente', 'success', 6000);
                setTimeout(function () {
                    location.reload();
                }, 3000);
            },
            error: function (error) {
                DevExpress.ui.notify('Error al enviar los datos', 'error', 6000);
                console.error("Error al enviar los datos:", error);
            }
        });
    }

    function updateStatusC() {

        if (selected2Ids.length === 0) {
            alert("No hay elementos seleccionados.");
            return;
        }
        console.log("Selected IDs:", selected2Ids);

        $.ajax({
            url: '@Url.Action("PutStatus2", "Muestras")',
            method: "PUT",
            data: {
                muestras: selected2Ids
            },
            success: function (result) {
                // Procesar la respuesta si es necesario
                DevExpress.ui.notify('Datos enviados correctamente', 'success', 6000);
                setTimeout(function () {
                    location.reload();
                }, 3000);
            },
            error: function (error) {
                DevExpress.ui.notify('Error al enviar los datos', 'error', 6000);
                console.error("Error al enviar los datos:", error);
            }
        });
    }

    var solicitudEnProgreso = false;

    function onStatusValueChanged(e) {
   
            console.log("Valor seleccionado:", e.value);

            var status = e.value;
            console.log("Valor seleccionado:", status);

            $.ajax({
                url: '@Url.Action("GetDate", "Muestras")',
                method: "GET",
                async: false,
                data: {
                    Estado: status
                },
                success: function (result) {
                    DevExpress.ui.notify('Datos enviados correctamente', 'success', 6000);
                    console.log(status);
                    // Recargar los datos del DataGrid
                    $("#gridContainer2").dxDataGrid("instance").option("dataSource", result);
                },
                error: function (error) {
                    DevExpress.ui.notify('Error al enviar los datos', 'error', 6000);
                    console.error("Error al enviar los datos:", error);
                },

            });
        
         
    }



    var clienteId = 3;
    var startDate = 0;
    var endDate = 0;
    var estado = 254;

    $(document).ready(function () {


        // Inicializar el botón #selectbutton después de que se haya renderizado en el HTML
        $("#selectButton").dxButton({
            stylingMode: "contained",
            text: "Enviar",
            type: "default",
            width: 120,
            onClick: function (e) {
                // ...
            },
            elementAttr: {
                style: "text-align: center; line-height: normal;"
            }
        });
    });

    function initializePopup() {
        var popupInstance = $("#popupContainer").dxPopup({
            title: "Recibir muestra",
            maxWidth: 500,
            visible: true,
            onHidden: function (e) {
                console.log("Pop-up cerrado");
            }
        }).dxPopup("instance");

        // Inicializar dateBoxes
        $("#startDateBox").dxDateBox({
            type: "date",
            value: new Date(),
            onValueChanged: function (e) {
                startDate = e.value;
            }
        });

        $("#endDateBox").dxDateBox({
            type: "date",
            value: new Date(),
            onValueChanged: function (e) {
                endDate = e.value;
            }
        });
    }


    function formatDate(date, format) {
        if (!date) return ''; // Manejar casos donde la fecha es nula

        var day = date.getDate();
        var month = date.getMonth() + 1;
        var year = date.getFullYear();

        // Formatear la fecha según el formato especificado
        if (format === 'MM-dd-yyyy') {
            return `${month}-${day}-${year}`;
        }

        // Si no se especifica un formato, retornar en el formato por defecto dd/MM/yyyy
        return `${day}/${month}/${year}`;
    }

    // function cambiarStatus() {
    //     var grid = $("#gridContainer").dxDataGrid("instance");
    //     var filas = grid.getSelectedRowKeys();

    //     if (filas.length > 0) {
    //         DevExpress.ui.notify("Cambiando el status a 21 para " + filas.length + " filas.", "info", 3000);

    //         filas.forEach(function (fila) {
    //             grid.updateRow(fila, { Status: 21 });
    //         });
    //     } else {
    //         DevExpress.ui.notify("Seleccione al menos una fila.", "warning", 3000);
    //     }
    // }

   
</script>